---
title: "Predict Tissue Type Based on Gene Expression"
author: "Suparna Kumar"
format: html
editor: visual
---

Your task is to build a machine learning algorithm that can predict tissue type from gene expression data. To do this we will use the Genotype-Tissue Expression (GTEx) project data. These data were collected across several centers. You will train on the data was processed in center B1 and will report the accuracy you obtain in the other centers. In cases where other centers include a tissue not represented in B1, you can exclude it from the testing. You can only use B1 to train.


We start with some data wrangling and provide some guidance. However once the data is organized you will be on your own designing an algorithm.

To accomplish this project you will be using all the skills you used during the course.

## Data and metadata files

We have downloaded files from the GTEX project that include both gene expression counts obtained from thousands of samples processed in RNA-Seq experiments and a sample annotation file describing each sample. Exploring the files on our Unix system we can start to understand how the data is organized explore the data:

```{r}
list.files("../gtex/metadata")

# GTEx_Analysis_v8_Annotations_SampleAttributesDD.xlsx, GTEx_Analysis_v8_Annotations_SampleAttributesDS.txt
# GTEx_Analysis_v8_Annotations_SubjectPhenotypesDD.xlsx, GTEx_Analysis_v8_Annotations_SubjectPhenotypesDS.txt

```

1. Read the sample annotation files using the fread function from data.table as it is very fast. Call the object pd for phenotype data.

```{r}
#| echo: false
#| warning: false
library(data.table)
library(tidyverse)
```

```{r}
# Read phenotype data
pd <- fread("../gtex/metadata/GTEx_Analysis_v8_Annotations_SampleAttributesDS.txt")
```


2. Read the annotation on subjects and join them with the sample annotation. Note subject might contribute more than one sample:

```{r}
# Read subject data
subjects <- fread("../gtex/metadata/GTEx_Analysis_v8_Annotations_SubjectPhenotypesDS.txt")
```


3. To connect them we need to extract the subject ID from the sample ID in pd. Add a new variable to the pd data frame called SUBJID with the subject ID.

```{r}
# Takes a pattern & subs with another
pd$SUBJID <- gsub("(\\w*-\\w*)-.*", "\\1", pd$SAMPID)
# pd <- left_join(pd, subjects, by = "SUBJID")
pd <- merge(pd, subjects, by = "SUBJID", all.x = TRUE)
# For right join, all.y = T, for full join, all = T
```


4. The expression data is stored in gct files.
```{r}
list.files("../gtex/gene_read_counts_by_tissue")
```

Each tissue has its own gct (like csv) file.

Rows in metadata are columns here.

If you look at these, say with less, you will notice that the first two lines are information about the files and then its a tab delimited file. We also notice that the first three columns are a row id, a gene id, and a gene symbol.

Read the files in one by one. Because we know we will be merging them, remove the gene id and gene symbol. We will later create a table to match ids to genes. Read all those files in:

```{r}
fns <- list.files("../gtex/gene_read_counts_by_tissue", full.name = TRUE)
tables <- lapply(fns, function(fn){
  cat("Reading file ", fn, "\n")
  x <- fread(fn, skip = 2)
  #  return(x[,-c(1,2)])
  return(as.matrix(x[, c("id", "Name", "Description") :=NULL])) # keep ID if you're going to merge
})
```


5. Now we are going to join all those tables into one big one. We will make sure that the rows match by using merge (data.table's join). This is overkill here because the GTEX project made sure that the rows were ordered the same way, but we will merge by id just to be sure. Hint: use the Reduce function.

```{r}
# x <- Reduce(function(x,y) merge(x,y,by="id", all+TRUE)) # Staying safe because what if the rows are not in the same order?
x <- do.call(cbind, tables)

# Check if all the column names in the files are in the metadata
all(colnames(x) %in% pd$SAMPID)
```

In machine learning, observations are stored in rows. In genomics, observations (samples) are in columns and genes are in rows

If output of `all(colnames(x) %in% pd$SAMPID)` is `FALSE`, check if there were accidental capital or small letters, dots instead of dash, prefix, or other formatting issues. Then check for missing samples. Best way to correct a missing sample is to contact the authors if you have a personal connection with them. Otherwise just drop the sample for analysis.

6. Create a data frame with just the gene information.
```{r}
gene_map <- fread(fns[1], skip = 2) |>
  as_tibble() |>
  select(c("id", "Name", "Description"))
```

7. Make sure the pd table is in the same order as the columns of x.
```{r}
pd <- pd[match(colnames(x), pd$SAMPID),]
```

8. Now that everything is in the right order, remove the id from x so we can create a numeric matrix.

Already done in step 4.5.

```{r}
# Clear memory for smoother run
rm(fns, tables, subjects)
gc();gc()
```


## Predict tissue type

You now have the predictors in `x` and all the sample information in `pd`. Divide both `x` and `pd` into training and test. Build your algorithm on the `B1` center and show your accuracy in the rest.


Loading required libraries:
```{r}
#| echo: false
#| warning: false
library(caret)
library(matrixStats)
library(DESeq2)
library(MASS)
```

Set up parallel processing.

```{r}
doParallel::registerDoParallel(cores = 6)
```

### Adipose Tissue, Brain, and Heart

There are too many tissue types and my laptop cannot handle so much data, so I'm picking only 3 to train on. Preparing the gene expression data for adipose tissue, brain, and heart from centre B1. Thus, the number of samples will be less than 663+255+432 = 1350.

```{r}
b1_x <- x[, pd$SMCENTER=="B1"]

# Tissue types for each sample from centre B1
b1_y <- pd |> dplyr::filter(SMCENTER == "B1") |> 
  dplyr::select(SAMPID, SMTSD)
```

```{r}
# Gene expression data for adipose tissue samples from centre B1
# Genes are in rows and samples are in columns
b1_x <- b1_x[ ,which(b1_y$SMTSD == "Adipose - Subcutaneous" | b1_y$SMTSD == "Brain - Cortex" | b1_y$SMTSD == "Heart - Left Ventricle")]
b1_y <- b1_y[match(colnames(b1_x), b1_y$SAMPID),] |> dplyr::select(SAMPID, SMTSD)
```

### Train & Test Sets
Now I will split the data into train and test sets.

```{r}
# Transpose to get genes in columns and samples in rows
b1_x <- t(b1_x)
# 80% training and 20% test
train_index <- createDataPartition(as.factor(b1_y$SMTSD), times = 1, p = 0.8, list = FALSE)

train_b1_x <- b1_x[train_index,]
train_b1_y <- b1_y[train_index,]

test_b1_x <- b1_x[-train_index,]
test_b1_y <- b1_y[-train_index,]

# Clear train_index
rm(train_index)
gc();gc()
```


### Data Transformation

First, I apply VST transformation on the data because I have to remove the dependence of variance on mean and have to handle large numbers of zero gene counts. Then, I will apply principal component analysis and select the top principal components that describe most of the data. I will train the model based on the top principal components.

```{r}
# For VST, ensure that genes are in the rows & samples in the columns
vst_b1_x <- vst(t(train_b1_x))

# Apply PCA - samples must be in the rows & genes in columns
pca_b1_result <- prcomp(t(vst_b1_x))
```

Choose the best number of PCs.

```{r}
# Remove big variable
rm(vst_b1_x)
gc()
plot(pca_b1_result$sdev^2/sum(pca_b1_result$sdev^2))
```

Let's zoom into the graph by looking at the first 50 PCs.
```{r}
plot((pca_b1_result$sdev^2/sum(pca_b1_result$sdev^2))[1:50])
```

Based on the graph, I choose 10 as my cutoff.

```{r}
# Select important features for training
dims <- 10
train_b1_x_pca <- pca_b1_result$x[,1:dims]

# Save PCA rotation matrix
pca_train_rotation <- pca_b1_result$rotation[,1:dims]

# Remove large PCA result
rm(pca_b1_result)
gc()
```

### Training LDA Model

Train the machine learning task using LDA from the `MASS` package.
```{r}
# Define train control
ctrl <- trainControl(method = "cv", number = 10, p = 0.9, allowParallel = TRUE)

# Train LDA model
lda_model <- train(x = train_b1_x_pca,
                   y = as.factor(train_b1_y$SMTSD),
                   method = "lda2",
                   trControl = ctrl,
                   tuneGrid = data.frame(dimen = seq(1, 10, 0.1)))
```

### Testing LDA Model on Test Set

Transform the test data using VST and perform PCA.

```{r}
vst_b1_x <- vst(t(test_b1_x))
# Apply PCA rotation
test_b1_x_pca <- (t(vst_b1_x)) %*% pca_train_rotation
```

Prediction score
```{r}
y_hat_lda <- predict(lda_model, test_b1_x_pca, type = "raw")
acc <- confusionMatrix(y_hat_lda, factor(test_b1_y$SMTSD))$overall["Accuracy"]
error_rate <- 1 - acc
print(paste("Error rate of LDA: ", error_rate))
```

Clearing the workspace:
```{r}
#| echo: false
rm(acc, b1_x, b1_y, ctrl, error_rate, test_b1_y, test_b1_x, test_b1_x_pca, train_b1_y, train_b1_x, train_b1_x_pca, vst_b1_x, y_hat_lda, dims)
gc();gc()
```

### Testing LDA Model on Other Centres

#### Centre C1
Now let's test the accuracy on tissues collected from centre C1.

```{r}
c1_x <- x[, pd$SMCENTER=="C1"]

# Tissue types for each sample from centre C1
c1_y <- pd |> dplyr::filter(SMCENTER == "C1") |> 
  dplyr::select(SAMPID, SMTSD)
```

```{r}
c1_x <- c1_x[ ,which(c1_y$SMTSD == "Adipose - Subcutaneous" | c1_y$SMTSD == "Brain - Cortex" | c1_y$SMTSD == "Heart - Left Ventricle")]
c1_y <- c1_y[match(colnames(c1_x), c1_y$SAMPID),] |> dplyr::select(SAMPID, SMTSD)
```

Transform the test data using VST and perform PCA.

```{r}
vst_c1_x <- vst(c1_x)
# Apply PCA rotation
c1_x_pca <- (t(vst_c1_x)) %*% pca_train_rotation
```

Prediction score
```{r}
y_hat_lda <- predict(lda_model, c1_x_pca, type = "raw")
acc <- confusionMatrix(y_hat_lda, factor(c1_y$SMTSD))$overall["Accuracy"]
error_rate <- 1 - acc
print(paste("Error rate of LDA on C1: ", error_rate))
```

Clear workspace.
```{r}
#| echo: false
#| warning: false
rm(acc, error_rate, c1_x, c1_x_pca, c1_y, pca_c1_result, vst_c1_x, y_hat_lda)
gc()
```

#### Centre D1
Now let's test the accuracy on tissues collected from centre D1.

```{r}
d1_x <- x[, pd$SMCENTER=="D1"]

# Tissue types for each sample from centre D1
d1_y <- pd |> dplyr::filter(SMCENTER == "D1") |> 
  dplyr::select(SAMPID, SMTSD)
```

```{r}
d1_x <- d1_x[ ,which(d1_y$SMTSD == "Adipose - Subcutaneous" | d1_y$SMTSD == "Brain - Cortex" | d1_y$SMTSD == "Heart - Left Ventricle")]
d1_y <- d1_y[match(colnames(d1_x), d1_y$SAMPID),] |> dplyr::select(SAMPID, SMTSD)
```

Transform the test data using VST and perform PCA.

```{r}
vst_d1_x <- vst(d1_x)
# Apply PCA rotation
d1_x_pca <- (t(vst_d1_x)) %*% pca_train_rotation
```

Prediction score
```{r}
y_hat_lda <- predict(lda_model, d1_x_pca, type = "raw")
acc <- confusionMatrix(y_hat_lda, factor(d1_y$SMTSD))$overall["Accuracy"]
error_rate <- 1 - acc
print(paste("Error rate of LDA on D1: ", error_rate))
```

Clear workspace.
```{r}
#| echo: false
#| warning: false
rm(acc, error_rate, d1_x, d1_x_pca, d1_y, pca_d1_result, vst_d1_x, y_hat_lda)
gc()
```
